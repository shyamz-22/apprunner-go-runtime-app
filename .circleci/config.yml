# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  # The Go orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/go
  go: circleci/go@1.7.3
  aws-cli: circleci/aws-cli@4.0.0

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  test:
    # These next lines define a docker executor: https://circleci.com/docs/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/go
    docker:
      - image: cimg/go:1.19.2
        environment:
          TABLE_NAME: urls-new
    steps:
      # Checkout the code as the first step.
      - checkout
      - go/load-cache # Load cached Go modules.
      - go/mod-download # Run 'go mod download'.
      - go/save-cache # Save Go modules to cache.
      - go/test: # Runs 'go test ./...' but includes extensive parameterization for finer tuning.
          covermode: atomic
          failfast: true
          race: true
  deploy:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run: >-
          aws apprunner list-services
          ls -lah
          exit 0
         
          
workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/configuration-reference/#workflows
  sample:
    jobs:
      - test
      - deploy
